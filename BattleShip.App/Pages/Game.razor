@page "/newGame/{difficulty:int}/{username}"
@page "/resumeGame"

@inject BattleShipService BattleShipService
@inject Blazored.LocalStorage.ILocalStorageService ProtectedLocalStorage
@inject NavigationManager NavigationManager

@code {
    private int _gridSize = 10;
    private char[,] grille = new char[10, 10];
    private char[,] grilleIA = new char[10, 10];
    private string gameId;
    [Parameter] public int difficulty { get; set; }
    [Parameter] public string username { get; set; }
    
    // Initialise la grille avec des valeurs par d√©faut
    protected override async Task OnInitializedAsync()
    {
        string currentUrl = NavigationManager.Uri;
        if (currentUrl.Contains("resumeGame"))
        {
            gameId = await ProtectedLocalStorage.GetItemAsync<string>("gameId");
            var response = await BattleShipService.GetGame(gameId);
            _gridSize = response.gridSize;
            InitialiseGrille(response.Ships);
        }
        else // new game
        {
            var response = await BattleShipService.StartGame(difficulty, username);
            gameId = response.Id.ToString();
            Console.WriteLine(response.gridSize);
            _gridSize = response.gridSize; 
            await ProtectedLocalStorage.SetItemAsync<string>("gameId", response.Id.ToString());
            InitialiseGrille(response.Ships);
        }
        // await PlayAutomatically();
    }


    private void InitialiseGrille(List<Ship> ships)
    {
        grille = new char[_gridSize, _gridSize];
        grilleIA = new char[_gridSize, _gridSize];
        for (int row = 0; row < _gridSize; row++)
        {
            for (int col = 0; col < _gridSize; col++)
            {
                // Initialise la grille du joueur
                Ship? ship = getShipAtCoordinates(row, col, ships); 
                if (ship != null) 
                { 
                    grille[row, col] = ship.Type; 
                } else { 
                    grille[row, col] = '\0'; 
                }

                // Initialise la grille de l'IA
                grilleIA[row, col] = '\0';
            }
        } 
    }
    private Ship? getShipAtCoordinates(int x, int y, List<Ship> ships)
    {
        foreach (var ship in ships)
        {
            if (ship.IsHorizontal)
            {
                if (x == ship.StartRow && y < ship.StartCol + ship.CurrentSize && y >= ship.StartCol)
                {
                    return ship;
                }

            }
            else // Vertical
            {
                if (y == ship.StartCol && x < ship.StartRow + ship.CurrentSize && x >= ship.StartRow)
                {
                    return ship;
                }
            }
        }
        return null;
    }

    // G√®re le clic sur une cellule de la grille
    private async void HandleClick(int row, int col)
    {
        if (grilleIA[row, col] == '\0')
        {
            Console.WriteLine("username : " + username);
            var response = await BattleShipService.Attack(gameId, row, col, username);
            CheckForWin(response);
            grilleIA[row, col] = response.PlayerAttackResult;
            grille[response.IACoordinates.X, response.IACoordinates.Y] = response.IAAttackResult;
            Console.WriteLine(grille);
            StateHasChanged();
        }
    }

    // Retourne le contenu √† afficher pour une cellule donn√©e
    private string GetCellDisplay(char cellValue)
    {
        switch (cellValue)
        {
            case 'M': return "‚ö™"; // Tir manqu√©
            case 'H': return "üî¥"; // Tir r√©ussi
            case '\0': return string.Empty; // Cellule vide
            default: return cellValue.ToString(); // Navire
        }
    }

    // Red√©marre le jeu
    private async Task RestartGame()
    {
        await ProtectedLocalStorage.RemoveItemAsync("gameId"); //TODO: Supprimer la partie de l'API
        await OnInitializedAsync();
    }
    
    private async void CheckForWin(AttackResult response)
    {
        if (response.Winner == "Player")
        {
            NavigationManager.NavigateTo("/endgame?winner=true");
        }
        else if (response.Winner == "IA")
        {
            NavigationManager.NavigateTo("/endgame?winner=false");
        }
    }
    
    private async Task PlayAutomatically()
    {
        for (int i = 0; i < _gridSize; i++)
        {
            for (int j = 0; j < _gridSize; j++)
            {
                if (grilleIA[i, j] == '\0')
                {
                    HandleClick(i, j);
                }
            }
        }
    }
}

<div style="display: flex; justify-content: space-around;">
    <div>
        <h3>Grille du Joueur</h3>
        <table class="battleship-grid">
            @for (int row = 0; row < _gridSize; row++)
            {
                <tr>
                    @for (int col = 0; col < _gridSize; col++)
                    {
                        <td>@GetCellDisplay(grille[row, col])</td>
                    }
                </tr>
            }
        </table>
    </div>
    <div>
        <h3>Grille de l'IA</h3>
        <table class="battleship-grid">
            @for (int row = 0; row < _gridSize; row++)
            {
                var currentRow = row;
                <tr>
                    @for (int col = 0; col < _gridSize; col++)
                    {
                        var currentCol = col;
                        <td @onclick="(() => HandleClick(currentRow, currentCol))">@GetCellDisplay(grilleIA[currentRow, currentCol])</td>
                    }
                </tr>
            }
        </table>
    </div>
</div>

<button @onclick="RestartGame">Restart</button>
